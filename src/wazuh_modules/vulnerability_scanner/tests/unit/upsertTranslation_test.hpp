/*
 * Wazuh Vulnerability Scanner - Unit Tests
 * Copyright (C) 2015, Wazuh Inc.
 * October 12, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#include "flatbuffers/flatbuffer_builder.h"
#include "flatbuffers/flatbuffers.h"
#include "flatbuffers/idl.h"
#include "flatbuffers/util.h"
#include "rocksDBWrapper.hpp"
#include "translation_generated.h"
#include "upsertTranslation.hpp"
#include "gtest/gtest.h"
#include <filesystem>

constexpr auto DATABASE_PATH {"queue/vd"};

const std::string translationExample1 {
    R"(
        {
            "target": "windows",
            "source": {
                "vendor": [
                    "Microsoft Corporation"
                ],
                "product": [
                    "Microsoft Edge"
                ],
                "version": []
            },
            "translation": {
                "vendor": [
                    "microsoft"
                ],
                "product": [
                    "edge_chromium"
                ],
                "version": []
            },
            "action": [
                "replace_vendor",
                "replace_product"
            ]
        }
        )"};

const std::string translationExample2 {
    R"(
                {
            "target": "windows",
            "source": {
                "vendor": [
                    "www\\.wireshark\\.org"
                ],
                "product": [
                    "Wireshark"
                ],
                "version": []
            },
            "translation": {
                "vendor": [
                    "wireshark"
                ],
                "product": [
                    "wireshark"
                ],
                "version": []
            },
            "action": [
                "replace_vendor",
                "replace_product"
            ]
        })"};

/**
 * @brief UpsertTranslation test class.
 *
 */
class UpsertTranslationTest : public ::testing::Test
{
protected:
    UpsertTranslationTest() = default;
    ~UpsertTranslationTest() override = default;

    /**
     * @brief Setup function.
     *
     */
    static void SetUpTestSuite()
    {
        std::filesystem::create_directories(DATABASE_PATH);

        std::string translationFlatbufferSchemaStr;

        // Read schema from filesystem.
        bool valid = (flatbuffers::LoadFile(FLATBUFFER_PATH.c_str(), false, &translationFlatbufferSchemaStr));
        ASSERT_EQ(valid, true);
        ASSERT_EQ(translationExample1.empty(), false);
        ASSERT_EQ(translationExample2.empty(), false);

        // Parse schema and JSON example 1.
        flatbuffers::Parser parser1;
        valid = (parser1.Parse(translationFlatbufferSchemaStr.c_str(), INCLUDE_DIRECTORIES) &&
                 parser1.Parse(translationExample1.c_str()));
        ASSERT_EQ(valid, true);

        // Get flatbuffer pointer 1
        uint8_t* buf1 = parser1.builder_.GetBufferPointer();
        size_t flatbufferSize1 = parser1.builder_.GetSize();

        // Parse schema and JSON example 2.
        flatbuffers::Parser parser2;
        valid = (parser2.Parse(translationFlatbufferSchemaStr.c_str(), INCLUDE_DIRECTORIES) &&
                 parser2.Parse(translationExample2.c_str()));
        ASSERT_EQ(valid, true);

        // Get flatbuffer pointer 2
        uint8_t* buf2 = parser2.builder_.GetBufferPointer();
        size_t flatbufferSize2 = parser2.builder_.GetSize();

        Utils::RocksDBWrapper rocksDbWrapper(TRANSLATION_DATABASE_PATH);

        // Save Wazuh translation 1
        const rocksdb::Slice VulnerabilityDescriptionSlice1(reinterpret_cast<const char*>(buf1), flatbufferSize1);
        rocksDbWrapper.put("WT-1", VulnerabilityDescriptionSlice1);

        // Save Wazuh translation 2
        const rocksdb::Slice VulnerabilityDescriptionSlice2(reinterpret_cast<const char*>(buf2), flatbufferSize2);
        rocksDbWrapper.put("WT-2", VulnerabilityDescriptionSlice2);
    }

    /**
     * @brief Teardown function.
     *
     */
    static void TearDownTestSuite()
    {
        std::filesystem::remove_all("queue");
    }
};
