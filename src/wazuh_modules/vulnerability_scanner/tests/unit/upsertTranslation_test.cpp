/*
 * Wazuh Vulnerability Scanner - Unit Tests
 * Copyright (C) 2015, Wazuh Inc.
 * October 12, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#include "upsertTranslation_test.hpp"

const std::string createExample {
    R"(
        {
                "data": [
                    {
                    "offset": 5,
                    "type": "create",
                    "version": 1,
                    "context": "translation",
                    "resource": "WT-3",
                    "payload": {
                        "target": "windows",
                        "source": {
                        "vendor": [
                            "^The Apache Software"
                        ],
                        "product": [
                            "^Apache Tomcat.*"
                        ],
                        "version": []
                        },
                        "translation": {
                        "vendor": [
                            "apache"
                        ],
                        "product": [
                            "tomcat"
                        ],
                        "version": []
                        },
                        "action": [
                        "replace_vendor",
                        "replace_product"
                        ]
                    }
                    }
                ]
                }
    )"};

const std::string updateExample {
    R"(
            {
            "data": [
                {
                "resource": "WT-1",
                "type": "update",
                "operations": [
                    {
                    "op": "replace",
                    "path": "/source/product/0",
                    "value": "Microsoft Edge Browser"
                    },
                    {
                    "op": "replace",
                    "path": "/source/vendor/0",
                    "value": "Microsoft"
                    }
                ]
                }
            ]
            }
    )"};

const std::string emptyDataExample {
    R"(
            {
                "data": [
                    {}
                ]
            }
    )"};

const std::string noResourceExample {
    R"(
            {
            "data": [
                {
                "type": "update",
                "operations": [
                    {
                    "op": "replace",
                    "path": "/source/product/0",
                    "value": "Microsoft Edge Browser"
                    },
                    {
                    "op": "replace",
                    "path": "/source/vendor/0",
                    "value": "Microsoft"
                    }
                ]
                }
            ]
            }
    )"};

const std::string noTypeExample {
    R"(
            {
            "data": [
                {
                "resource": "WT-1",
                "operations": [
                    {
                    "op": "replace",
                    "path": "/source/product/0",
                    "value": "Microsoft Edge Browser"
                    },
                    {
                    "op": "replace",
                    "path": "/source/vendor/0",
                    "value": "Microsoft"
                    }
                ]
                }
            ]
            }
    )"};

const std::string invalidTypeExample {
    R"(
            {
            "data": [
                {
                "resource": "WT-1",
                "type": "modify",
                "operations": [
                    {
                    "op": "replace",
                    "path": "/source/product/0",
                    "value": "Microsoft Edge Browser"
                    },
                    {
                    "op": "replace",
                    "path": "/source/vendor/0",
                    "value": "Microsoft"
                    }
                ]
                }
            ]
            }
    )"};

TEST_F(UpsertTranslationTest, EmptyData)
{
    // Create rocksdb wrapper instance.
    Utils::RocksDBWrapper rocksDbWrapper(TRANSLATION_DATABASE_PATH);

    // Update Wazuh translation entry.
    nlohmann::json upsertExampleJSON = nlohmann::json::parse(emptyDataExample);

    testing::internal::CaptureStderr();
    UpsertTranslation::upsertTranslationEntry(upsertExampleJSON, rocksDbWrapper);
    std::string output = testing::internal::GetCapturedStderr();

    EXPECT_EQ(output, "Invalid data format\n");
}

TEST_F(UpsertTranslationTest, NoResource)
{
    // Create rocksdb wrapper instance.
    Utils::RocksDBWrapper rocksDbWrapper(TRANSLATION_DATABASE_PATH);

    // Update Wazuh translation entry.
    nlohmann::json upsertExampleJSON = nlohmann::json::parse(noResourceExample);

    testing::internal::CaptureStderr();
    UpsertTranslation::upsertTranslationEntry(upsertExampleJSON, rocksDbWrapper);
    std::string output = testing::internal::GetCapturedStderr();

    EXPECT_EQ(output, "Invalid data format\n");
}

TEST_F(UpsertTranslationTest, NoType)
{
    // Create rocksdb wrapper instance.
    Utils::RocksDBWrapper rocksDbWrapper(TRANSLATION_DATABASE_PATH);

    // Update Wazuh translation entry.
    nlohmann::json upsertExampleJSON = nlohmann::json::parse(noTypeExample);

    testing::internal::CaptureStderr();
    UpsertTranslation::upsertTranslationEntry(upsertExampleJSON, rocksDbWrapper);
    std::string output = testing::internal::GetCapturedStderr();

    EXPECT_EQ(output, "Invalid data format\n");
}

TEST_F(UpsertTranslationTest, InvalidType)
{
    // Create rocksdb wrapper instance.
    Utils::RocksDBWrapper rocksDbWrapper(TRANSLATION_DATABASE_PATH);

    // Update Wazuh translation entry.
    nlohmann::json upsertExampleJSON = nlohmann::json::parse(invalidTypeExample);

    testing::internal::CaptureStderr();
    UpsertTranslation::upsertTranslationEntry(upsertExampleJSON, rocksDbWrapper);
    std::string output = testing::internal::GetCapturedStderr();

    EXPECT_EQ(output, "Invalid operation type: modify\n");
}

TEST_F(UpsertTranslationTest, UpdateTranslationEntrySuccess)
{
    // Create rocksdb wrapper instance.
    Utils::RocksDBWrapper rocksDbWrapper(TRANSLATION_DATABASE_PATH);

    // Update Wazuh translation entry.
    nlohmann::json updateExampleJSON = nlohmann::json::parse(updateExample);
    UpsertTranslation::upsertTranslationEntry(updateExampleJSON, rocksDbWrapper);

    // Read from rocksdb database.
    std::string translationEntryStr;
    rocksDbWrapper.get("WT-1", translationEntryStr);
    ASSERT_EQ(translationEntryStr.empty(), false);

    // Parse flatbuffer
    const NSVulnerabilityScanner::TranslationEntry* translationEntry =
        NSVulnerabilityScanner::GetTranslationEntry(translationEntryStr.c_str());
    EXPECT_EQ(translationEntry->target()->str(), "windows");

    auto sVendorArray = translationEntry->source()->vendor();
    auto* sProductArray = translationEntry->source()->product();
    auto* sVersionArray = translationEntry->source()->version();
    auto* tVendorArray = translationEntry->translation()->vendor();
    auto* tProductArray = translationEntry->translation()->product();
    auto* tVersionArray = translationEntry->translation()->version();

    EXPECT_EQ(sVendorArray->Get(0)->str(), "Microsoft");
    EXPECT_EQ(sProductArray->Get(0)->str(), "Microsoft Edge Browser");
    EXPECT_EQ(sVersionArray->size(), 0);
    EXPECT_EQ(tVendorArray->Get(0)->str(), "microsoft");
    EXPECT_EQ(tProductArray->Get(0)->str(), "edge_chromium");
    EXPECT_EQ(tVersionArray->size(), 0);
}

TEST_F(UpsertTranslationTest, CreateTranslationEntrySuccess)
{
    // Create rocksdb wrapper instance.
    Utils::RocksDBWrapper rocksDbWrapper(TRANSLATION_DATABASE_PATH);

    // Create Wazuh translation entry.
    nlohmann::json createExampleJSON = nlohmann::json::parse(createExample);
    UpsertTranslation::upsertTranslationEntry(createExampleJSON, rocksDbWrapper);

    // Read from rocksdb database.
    std::string translationEntryStr;
    rocksDbWrapper.get("WT-3", translationEntryStr);
    ASSERT_EQ(translationEntryStr.empty(), false);

    // Parse flatbuffer
    const NSVulnerabilityScanner::TranslationEntry* translationEntry =
        NSVulnerabilityScanner::GetTranslationEntry(translationEntryStr.c_str());
    EXPECT_EQ(translationEntry->target()->str(), "windows");

    auto sVendorArray = translationEntry->source()->vendor();
    auto* sProductArray = translationEntry->source()->product();
    auto* sVersionArray = translationEntry->source()->version();
    auto* tVendorArray = translationEntry->translation()->vendor();
    auto* tProductArray = translationEntry->translation()->product();
    auto* tVersionArray = translationEntry->translation()->version();

    EXPECT_EQ(sVendorArray->Get(0)->str(), "^The Apache Software");
    EXPECT_EQ(sProductArray->Get(0)->str(), "^Apache Tomcat.*");
    EXPECT_EQ(sVersionArray->size(), 0);
    EXPECT_EQ(tVendorArray->Get(0)->str(), "apache");
    EXPECT_EQ(tProductArray->Get(0)->str(), "tomcat");
    EXPECT_EQ(tVersionArray->size(), 0);
}
